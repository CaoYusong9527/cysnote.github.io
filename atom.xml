<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://cysnote.github.io</id>
    <title>Gridea</title>
    <updated>2020-11-09T08:10:56.529Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://cysnote.github.io"/>
    <link rel="self" href="https://cysnote.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://cysnote.github.io/images/avatar.png</logo>
    <icon>https://cysnote.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[javascript高级]]></title>
        <id>https://cysnote.github.io/post/javascript-gao-ji/</id>
        <link href="https://cysnote.github.io/post/javascript-gao-ji/">
        </link>
        <updated>2020-11-09T07:37:41.000Z</updated>
        <content type="html"><![CDATA[<h1 id="课程介绍">课程介绍</h1>
<h2 id="课程大纲">课程大纲</h2>
<figure data-type="image" tabindex="1"><img src="./images/dagang.png" alt="课程大纲" loading="lazy"></figure>
<h2 id="学习资源">学习资源</h2>
<ul>
<li>JavaScript 高级程序设计（第三版）
<ul>
<li>前端的红宝书</li>
<li>建议每一个前端都完整的看一遍</li>
</ul>
</li>
<li>JavaScript面向对象编程指南（第2版）</li>
<li>JavaScript面向对象精要</li>
<li>JavaScript 权威指南</li>
<li>JavaScript 语言精粹</li>
<li>你不知道的 JavaScript</li>
</ul>
<h1 id="面向对象编程">面向对象编程</h1>
<figure data-type="image" tabindex="2"><img src="./images/mxdxkf.png" alt="面向对象编程" loading="lazy"></figure>
<h2 id="什么是对象">什么是对象？</h2>
<blockquote>
<p>Everything is object （万物皆对象）</p>
</blockquote>
<figure data-type="image" tabindex="3"><img src="./images/20160823024542444.jpg" alt="万物皆对象" loading="lazy"></figure>
<p>对象到底是什么，我们可以从两次层次来理解。</p>
<p><strong>(1) 对象是具体事物的抽象。</strong></p>
<p>一本书、一辆汽车、一个人都可以是对象，当实物被抽象成对象，实物之间的关系就变成了对象之间的关系，从而就可以模拟现实情况，针对对象进行编程。</p>
<p>问： 书是对象吗</p>
<p><strong>(2)对象是无序键值对的集合，其属性可以包含基本值、对象或者函数</strong></p>
<p>每个对象都是基于一个引用类型创建的，这些类型可以是系统内置的原生类型，也可以是开发人员自定义的类型。</p>
<h2 id="什么是面向对象">什么是面向对象？</h2>
<p>面向对象编程 —— <code>Object Oriented Programming</code>，简称 OOP ，是一种编程开发思想。</p>
<p>在面向对象程序开发思想中，每一个对象都是功能中心，具有明确分工，可以完成接受信息、处理数据、发出信息等任务。<br>
因此，面向对象编程具有灵活、代码可复用、高度模块化等特点，容易维护和开发，比起由一系列函数或指令组成的传统的过程式编程（procedural programming），更适合多人合作的大型软件项目。</p>
<h2 id="面向对象编程的三大特性">面向对象编程的三大特性：</h2>
<ul>
<li>封装性
<ul>
<li>将功能的具体实现，全部封装到对象的内部，外界使用对象时，只需要关注对象提供的方法如何使用，而不需要关心对象的内部具体实现，这就是封装。</li>
</ul>
</li>
<li>继承性
<ul>
<li>在js中，继承的概念很简单，一个对象没有的一些属性和方法，另外一个对象有，拿过来用，就实现了继承。</li>
<li><strong>注意：在其他语言里面，继承是类与类之间的关系，在js中，是对象与对象之间的关系。</strong></li>
</ul>
</li>
<li>[多态性]
<ul>
<li>多态是在强类型的语言中才有的。js是弱类型语言，所以JS不支持多态</li>
</ul>
</li>
</ul>
<h1 id="对象-原型-原型链">对象、原型、原型链</h1>
<h2 id="创建对象的方式">创建对象的方式</h2>
<h3 id="内置构造函数创建">内置构造函数创建</h3>
<p>我们可以直接通过 <code>new Object()</code> 创建：</p>
<pre><code class="language-javascript">//在js中，对象有动态特性，可以随时的给一个对象增加属性或者删除属性。
var person = new Object()
person.name = 'Jack'
person.age = 18

person.sayName = function () {
  console.log(this.name)
}
</code></pre>
<p>缺点：麻烦，每个属性都需要添加。</p>
<h3 id="对象字面量创建">对象字面量创建</h3>
<pre><code class="language-javascript">var person = {
  name: 'Jack',
  age: 18,
  sayName: function () {
    console.log(this.name)
  }
}
</code></pre>
<p>缺点：如果要批量生成多个对象，应该怎么办?代码很冗余</p>
<h3 id="简单改进工厂函数">简单改进：工厂函数</h3>
<p>我们可以写一个函数，解决代码重复问题：</p>
<pre><code class="language-javascript">function createPerson (name, age) {
  return {
    name: name,
    age: age,
    sayName: function () {
      console.log(this.name)
    }
  }
}
</code></pre>
<p>然后生成实例对象：</p>
<pre><code class="language-javascript">var p1 = createPerson('Jack', 18)
var p2 = createPerson('Mike', 18)
</code></pre>
<p>缺点：但却没有解决对象识别的问题，创建出来的对象都是Object类型的。</p>
<h3 id="继续改进构造函数">继续改进：构造函数</h3>
<p>构造函数是一个函数，用于实例化对象，需要配合new操作符使用。</p>
<pre><code class="language-javascript">function Person (name, age) {
  this.name = name
  this.age = age
  this.sayName = function () {
    console.log(this.name)
  }
}

var p1 = new Person('Jack', 18)
p1.sayName() // =&gt; Jack

var p2 = new Person('Mike', 23)
p2.sayName() // =&gt; Mike
</code></pre>
<p>而要创建 <code>Person</code> 实例，则必须使用 <code>new</code> 操作符。<br>
以这种方式调用构造函数会经历以下 4 个步骤：</p>
<ol>
<li>创建一个新对象</li>
<li>将构造函数的作用域赋给新对象（因此 this 就指向了这个新对象）</li>
<li>执行构造函数中的代码</li>
<li>返回新对象</li>
</ol>
<p><strong>构造函数需要配合new操作符使用才有意义，构造函数首字母都需要大写</strong></p>
<h3 id="构造函数的缺点">构造函数的缺点</h3>
<p>使用构造函数带来的最大的好处就是创建对象更方便了，但是其本身也存在一个浪费内存的问题：</p>
<pre><code class="language-javascript">function Person (name, age) {
  this.name = name
  this.age = age
  this.type = 'human'
  this.sayHello = function () {
    console.log('hello ' + this.name)
  }
}

var p1 = new Person('lpz', 18)
var p2 = new Person('Jack', 16)
console.log(p1.sayHello === p2.sayHello) // =&gt; false
</code></pre>
<p>解决方案：</p>
<pre><code class="language-javascript">function sayHello() {
  console.log('hello ' + this.name)
}

function Person (name, age) {
  this.name = name
  this.age = age
  this.type = 'human'
  this.sayHello = sayHello
}

var p1 = new Person('lpz', 18)
var p2 = new Person('Jack', 16)

console.log(p1.sayHello === p2.sayHello) // =&gt; true
</code></pre>
<p>缺点：会暴漏很多的函数，容易造成全局变量污染。</p>
<h2 id="原型">原型</h2>
<h3 id="原型基本概念">原型基本概念</h3>
<p>Javascript 规定，每一个函数都有一个 <code>prototype</code> 属性，指向另一个对象。<br>
这个对象的所有属性和方法，都会被构造函数的实例继承。</p>
<p>这也就意味着，我们可以把所有对象实例需要共享的属性和方法直接定义在 <code>prototype</code> 对象上。</p>
<pre><code class="language-javascript">function Person (name, age) {
  this.name = name
  this.age = age
}

console.log(Person.prototype)

Person.prototype.type = 'human'

Person.prototype.sayName = function () {
  console.log(this.name)
}

var p1 = new Person(...)
var p2 = new Person(...)

console.log(p1.sayName === p2.sayName) // =&gt; true
</code></pre>
<p>这时所有实例的 <code>type</code> 属性和 <code>sayName()</code> 方法，其实都是同一个内存地址</p>
<h3 id="构造函数-实例-原型三者之间的关系">构造函数、实例、原型三者之间的关系</h3>
<p>构造函数：构造函数就是一个函数，配合new可以新建对象。</p>
<p>实例：通过构造函数实例化出来的对象我们把它叫做构造函数的实例。一个构造函数可以有很多实例。</p>
<p>原型：每一个构造函数都有一个属性<code>prototype</code>，函数的prototype属性值就是原型。通过构造函数创建出来的实例能够直接使用原型上的属性和方法。</p>
<img src="./images/原型三角关系.jpg" alt="">
<p>思考：内置对象中，有很多的方法，这些方法存在哪里？</p>
<h3 id="__proto__"><code>__proto__</code></h3>
<p>任意一个对象，都会有<code>__proto__</code>属性，这个属性指向了构造函数的prototype属性，也就是原型对象。</p>
<p>获取原型对象：</p>
<ul>
<li>通过<code>构造函数.prototype</code>可以获取</li>
<li>通过<code>实例.__proto__</code>可以获取（隐式原型）</li>
<li>它们指向了同一个对象<code>构造函数.prototype === 实例.__proto__</code></li>
</ul>
<p><strong>注意：<code>__proto__</code>是浏览器的一个隐藏（私有）属性，IE浏览器不支持，不要通过它来修改原型里的内容，如果要修改原型中的内容，使用构造函数.prototype去修改</strong></p>
<h3 id="constructor属性">constructor属性</h3>
<p>默认情况下，原型对象中只包含了一个属性：constructor，constructor属性指向了当前的构造函数。</p>
<figure data-type="image" tabindex="4"><img src="./images/sanjiao.png" alt="" loading="lazy"></figure>
<h2 id="原型链">原型链</h2>
<h3 id="原型链概念">原型链概念</h3>
<p>任何一个对象，都有原型对象，原型对象本身又是一个对象，所以原型对象也有自己的原型对象，这样一环扣一环就形成了一个链式结构，我们把这个链式结构称为：原型链。</p>
<p>绘制对象的原型链结构：</p>
<pre><code class="language-javascript">//1. var p = new Person();
//2. var o = new Object();
//3. var arr = new Array();
//4. var date = new Date();
//5. Math
//6. 查看一个div的原型链结构
</code></pre>
<p>总结：Object.prototype是原型链的尽头，Object.prototype的原型是null。</p>
<figure data-type="image" tabindex="5"><img src="images/proto.png" alt="" loading="lazy"></figure>
<h3 id="属性查找原则">属性查找原则</h3>
<p>如果是获取操作</p>
<ol>
<li>会先在自身上查找，如果没有</li>
<li>则根据<code>__proto__</code>对应的原型去找，如果没有</li>
<li>一直找到<code>Object.prototyp</code>，如果没有，那就找不到了。</li>
</ol>
<p>测试题1</p>
<pre><code class="language-js">function Person(name) {
  this.name = name;
}

Person.prototype.name = &quot;ls&quot;;
Person.prototype.money = 100;

var p = new Person(&quot;zs&quot;);

console.log(p.name);
console.log(p.money);
</code></pre>
<p>测试题2</p>
<pre><code class="language-js">function Person(name) {
  this.name = name
}

Person.prototype.name = &quot;ls&quot;;
Person.prototype.money = 100;

var p = new Person();

console.log(p.name);
console.log(p.money);
</code></pre>
<p>测试题3</p>
<pre><code class="language-js">function Person(name) {
  if (name) {
    this.name = name;
  }
}

Person.prototype.name = &quot;ls&quot;;
Person.prototype.money = 100;

var p = new Person();

console.log(p.name);
console.log(p.money);
</code></pre>
<h3 id="属性设置原则">属性设置原则</h3>
<p>只会修改对象自身的属性，如果自身没有这个属性，那么就会添加这个属性，并不会修改原型中的属性。</p>
<pre><code class="language-js">function Person() {
  
}

var p = new Person();
Person.prototype.money = 200;

console.log(p.money);

p.money = 300;

console.log(p.money);

console.log(Person.prototype.money);
</code></pre>
<h1 id="函数进阶">函数进阶</h1>
<h2 id="定义函数的三种方式">定义函数的三种方式</h2>
<h3 id="函数声明">函数声明</h3>
<pre><code class="language-javascript">fn();//函数声明可以先调用，在声明
function fn(){
  console.log(&quot;这是函数声明&quot;)
}
</code></pre>
<h3 id="函数表达式">函数表达式</h3>
<pre><code class="language-javascript">var fn = function() {
  console.log(&quot;这是函数表达式&quot;);  
}
fn();//函数表达式必须先声明，再调用
</code></pre>
<h3 id="构造函数function">构造函数Function</h3>
<pre><code class="language-javascript">//函数也是对象，可以使用Function构造函数new出来
//相当于var fn = function(){}
var fn = new Function();

//语法：new Function(arg1,arg2,arg3..,body);
// 1. 所有的参数都是字符串类型。
// 2. 前面可以定义任意多个形参，最后一个参数是代码体。
var fn = new Function(&quot;alert(1111)&quot;);
fn();

var fn1 = new Function(&quot;a1&quot;, &quot;a2&quot;, &quot;alert(a1+a2)&quot;);
fn1(1,2);
</code></pre>
<h2 id="函数也是对象">函数也是对象</h2>
<blockquote>
<p>函数是由new Function创建出来的，因此函数也是一个对象， <code>所有的函数都是new Function的实例</code>。</p>
</blockquote>
<h3 id="函数的原型链结构">函数的原型链结构</h3>
<p>画出下列代码的原型链结构</p>
<pre><code class="language-javascript">//var Person = new Function();
function Person(){
  
}
</code></pre>
<figure data-type="image" tabindex="6"><img src="./images/function.png" alt="" loading="lazy"></figure>
<h3 id="functionprototype常用成员">Function.prototype常用成员</h3>
<ul>
<li>call：调用函数，重新指向this</li>
<li>apply：调用函数，重新指向this</li>
<li>bind：重新指向this，返回一个新的函数，不调用。</li>
</ul>
<h2 id="作用域">作用域</h2>
<blockquote>
<p>作用域：变量起作用的区域，也就是说：变量定义后，可以在哪个范围内使用该变量。</p>
</blockquote>
<pre><code class="language-javascript">var num = 11;//全局变量
function fn(){
  var num1 = 22;//局部变量
  console.log(num);  // 全局变量在任何地方都能访问到
  console.log(num1);  
}
console.log(num);
</code></pre>
<p>在js里只有全局作用域和函数作用域。</p>
<p>函数作用域是在函数定义的时候作用域就确定下来了，和函数在哪调用无关。</p>
<pre><code class="language-javascript">var num = 123;
function f1() {
  console.log(num);
}

function f2(){
  var num = 456;
  f1();
}
f2();//打印啥？
</code></pre>
<h3 id="作用域链">作用域链</h3>
<blockquote>
<p>作用域链：只要是函数，就会形成一个作用域，如果这个函数被嵌套在其他函数中，那么外部函数也有自己的作用域，这个一直往上到全局环境，就形成了一个作用域链。</p>
</blockquote>
<p><code>变量的搜索原则</code>：</p>
<ol>
<li>从当前作用域开始查找是否声明了该变量，如果存在，那么就直接返回这个变量的值。</li>
<li>如果不存在，就会往上一层作用域查询，如果存在，就返回。</li>
<li>如果不存在，一直查询到全局作用域，如果存在，就返回。如果在全局中也没有找到该变量会报错</li>
</ol>
<h3 id="作用域链练习">作用域链练习</h3>
<pre><code class="language-javascript">// 1 
var num = 10;
fn1();
function fn1() {
  console.log(num);  // ?
  var num = 20;
  console.log(num);  // ?
}
console.log(num);    // ?


// 2 -- 改造上面的面试题
var num = 10;
fn1();
function fn1() {
  console.log(num);  // ?
  num = 20;
  console.log(num);  // ?
}
console.log(num);    // ?


// 3
var num = 123
function f1(num) {
    console.log(num) // ?
}

function f2() {
    var num = 456
    f1(num)
}
f2()


// 4
var num1 = 10;
var num2 = 20;
function fn(num1) {
  num1 = 100;
  num2 = 200;
  num3 = 300;
  console.log(num1);
  console.log(num2);
  console.log(num3);
  var num3;
}
fn();
console.log(num1);
console.log(num2);
console.log(num3);
</code></pre>
<h2 id="函数的四种调用模式">函数的四种调用模式</h2>
<blockquote>
<p>根据函数内部this的指向不同，可以将函数的调用模式分成4种</p>
</blockquote>
<ol>
<li>函数调用模式</li>
<li>方法调用模式</li>
<li>构造函数调用模式</li>
<li>上下文调用模式（借用方法模式）</li>
</ol>
<pre><code class="language-javascript">函数：当一个函数不是一个对象的属性时，我们称之为函数。
方法：当一个函数被保存为对象的一个属性时，我们称之为方法。
</code></pre>
<h3 id="函数调用模式">函数调用模式</h3>
<p><font color="red">如果一个函数不是一个对象的属性时，就是被当做一个函数来进行调用的。此时this指向了window</font></p>
<pre><code class="language-javascript">function fn(){
  console.log(this);//指向window
}
fn();
</code></pre>
<h3 id="方法调用模式">方法调用模式</h3>
<p><font color="red">当一个函数被保存为对象的一个属性时，我们称之为一个方法。当一个方法被调用时，this被绑定到当前对象</font></p>
<pre><code class="language-javascript">var obj = {
  sayHi:function(){
    console.log(this);//在方法调用模式中，this指向调用当前方法的对象。
  }
}
obj.sayHi();
</code></pre>
<h3 id="构造函数调用模式">构造函数调用模式</h3>
<p><font color="red">如果函数是通过new关键字进行调用的，此时this被绑定到创建出来的新对象上。</font></p>
<pre><code class="language-javascript">function Person(){
  console.log(this);
}
Person();//this指向什么？
var p = new Person();//this指向什么？
</code></pre>
<p><strong>总结：分析this的问题，主要就是区分函数的调用模式，看函数是怎么被调用的。</strong></p>
<ul>
<li>猜猜看：</li>
</ul>
<pre><code class="language-javascript">// 分析思路：1. 看this是哪个函数的  2. 看这个函数是怎么调用的，处于什么调用模式

// 1
var age = 38;
var obj = {
    age: 18,
    getAge: function () {
        console.log(this.age);
    }
}

var f = obj.getAge;
f();//???


// 2
var age = 38;
var obj = {
  age:18,
  getAge:function () {
    console.log(this.age);//???
    function foo(){
      console.log(this.age);//????
    }
    foo();
  }
}
obj.getAge();
obj[&quot;getAge&quot;]();


// 3
var length = 10

function fn() {
    console.log(this.length)
}
var obj = {
    length: 5,
    method: function (fn) {
        fn() 
        arguments[0]();
    }
}
obj.method(fn, 10, 5);
</code></pre>
<p>几种特殊的this指向</p>
<ul>
<li>定时器中的this指向了window，因为定时器的function最终是由window来调用的。</li>
<li>事件中的this指向的是当前的元素，在事件触发的时候，浏览器让当前元素调用了function</li>
</ul>
<h3 id="上下文调用模式">上下文调用模式</h3>
<blockquote>
<p>上下文调用模式也叫方法借用模式，分为apply与call</p>
<p>使用方法： 函数.call() 或者 函数.apply()</p>
</blockquote>
<h4 id="call方法">call方法</h4>
<p>call方法可以调用一个函数，并且可以指定这个函数的<code>this</code>指向</p>
<pre><code class="language-javascript">//所有的函数都可以使用call进行调用
//参数1：指定函数的this，如果不传，则this指向window
//其余参数：和函数的参数列表一模一样。
//说白了，call方法也可以和()一样，进行函数调用，call方法的第一个参数可以指定函数内部的this指向。
fn.call(thisArg, arg1, arg2, arg2);
</code></pre>
<ul>
<li>借用对象的方法</li>
</ul>
<h4 id="伪数组与数组">伪数组与数组</h4>
<blockquote>
<p>伪数组也叫类数组</p>
</blockquote>
<ol>
<li>伪数组其实就是一个对象，但是跟数组一样，伪数组也会有<code>length</code>属性，也有<code>0,1,2,3</code>等属性。</li>
<li>伪数组并没有数组的方法，不能使用<code>push/pop</code>等方法</li>
<li>伪数组可以跟数组一样进行遍历，通过下标操作。</li>
<li>常见的伪数组：<code>arguments</code>、<code>document.getElementsByTagName的返回值</code>、<code>jQuery对象</code></li>
</ol>
<pre><code class="language-javascript">var arrayLike = {
  0:&quot;张三&quot;,
  1:&quot;李四&quot;,
  2:&quot;王五&quot;,
  length:3
}
//伪数组可以和数组一样进行遍历
</code></pre>
<ul>
<li>伪数组借用数组的方法</li>
</ul>
<pre><code class="language-javascript">Array.prototype.push.call(arrLike, &quot;赵六&quot;);
</code></pre>
<h4 id="apply方法">apply方法</h4>
<p><code>apply()</code>方法的作用和 <code>call()</code>方法类似，只有一个区别，就是<code>apply()</code>方法接受的是<strong>一个包含多个参数的数组</strong>。而<code>call()</code>方法接受的是<strong>若干个参数的列表</strong></p>
<p>call和apply的使用场景：</p>
<ul>
<li>如果参数比较少，使用call会更加简洁</li>
<li>如果参数存放在数组中，此时需要使用apply</li>
</ul>
<p>课后练习：</p>
<pre><code class="language-javascript">1. 求数组的最大值和最小值
</code></pre>
<h4 id="bind方法">bind方法</h4>
<p>**bind()**方法创建一个新的函数, 可以绑定新的函数的<code>this</code>指向</p>
<pre><code class="language-javascript">// 返回值：新的函数
// 参数：新函数的this指向，当绑定了新函数的this指向后，无论使用何种调用模式，this都不会改变。
var newFn = fn.bind(window);
</code></pre>
<h2 id="递归函数">递归函数</h2>
<blockquote>
<p>递归函数：函数内部直接或者间接的调用自己</p>
</blockquote>
<p>递归的要求：</p>
<ol>
<li>自己调用自己（直接或者间接）</li>
<li>要有结束条件（出口）</li>
</ol>
<p>递归函数主要是<code>化归思想</code> ,将一个复杂的问题简单化，主要用于解决数学中的一些问题居多。</p>
<ul>
<li>把要解决的问题，归结为已经解决的问题上。</li>
<li>一定要考虑什么时候结束让函数结束，也就是停止递归（一定要有已知条件）</li>
</ul>
<p>练习：</p>
<ul>
<li>计算1-100之间所有数的和</li>
<li>深拷贝和浅拷贝</li>
</ul>
<h1 id="闭包">闭包</h1>
<h2 id="闭包的基本概念">闭包的基本概念</h2>
<p><code>闭包（closure）</code>是JavaScript语言的一个难点，也是JavaScript的一个特色，很多高级的应用都要依靠闭包来实现。</p>
<h3 id="闭包的概念">闭包的概念</h3>
<blockquote>
<p>在<a href="https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6">计算机科学</a>中，<strong>闭包</strong>（英语：Closure），又称<strong>词法闭包</strong>（Lexical Closure）或<strong>函数闭包</strong>（function closures），是引用了自由变量的函数</p>
</blockquote>
<p>在JavaScript中，在函数中可以（嵌套）定义另一个函数时，如果内部的函数引用了外部的函数的变量，则产生闭包。</p>
<p>产生闭包的条件</p>
<pre><code class="language-js">当内部函数访问了外部函数的变量的时候，就会形成闭包。
</code></pre>
<h2 id="闭包的作用">闭包的作用</h2>
<blockquote>
<p>保护私有变量不被修改</p>
</blockquote>
<h3 id="计数器">计数器</h3>
<p>需求：统计一个函数的调用次数</p>
<pre><code class="language-javascript">var count = 0;
function fn(){
  count++;
  console.log(&quot;我被调用了，调用次数是&quot;+count);
}
fn();
fn();
fn();
</code></pre>
<p>缺点：count是全局变量，不安全。</p>
<p>使用闭包解决这个问题！！！！</p>
<pre><code class="language-javascript">function outer(){
  var count = 0; // 私有变量, 将count保护起来了
  function add(){
    count++;
    console.log(&quot;当前count&quot;+count);
  }
  return add;
}

var result = outer();
result();
</code></pre>
<h2 id="闭包经典面试题">闭包经典面试题</h2>
<ol>
<li>
<p>点击按钮, 打印当前按钮的下标</p>
</li>
<li>
<pre><code class="language-js">function fn() {
    var a = 0;

    return function() {
        a++;
        console.log(a);
    }

}

var f1 = fn();

f1();
f1();
f1();

var f2 = fn();
f2();
f2();
f2();
f2();
</code></pre>
</li>
<li>
<pre><code class="language-js">function f1(){
    var name=&quot;abc&quot;;
    
    return function(){
        console.log(name);
    }
    
}
var fn = f1();

var name=&quot;张三&quot;;

fn();
</code></pre>
</li>
</ol>
<h1 id="继承">继承</h1>
<blockquote>
<p>现实生活中的继承，子承父业, 如儿子继承了父辈的财产，公司等</p>
<p>js中的继承，一个对象可以使用另一个对象中的方法或属性</p>
</blockquote>
<p>继承的目的:  方便代码的复用</p>
<pre><code class="language-js">var lw = {
    skill: &quot;翻墙&quot;,
	age: 28
}

function Person(){}
var xm = new Person();

// 如何实现让xm可以使用到lw对象上的skill属性???
xm.skill; // ==&gt; 翻墙
</code></pre>
<h2 id="js常见的几种继承模式">JS常见的几种继承模式</h2>
<h3 id="原型链继承">原型链继承</h3>
<p>一个对象可以访问构造函数的原型中的属性和方法，那么如果想要让一个对象增加某些属性和方法，只需要把这些属性和方法放到原型对象中即可。这样就实现了继承, 称之为原型链继承</p>
<ul>
<li>直接给原型增加属性和方法</li>
<li>原型替换（注意：constructor）</li>
</ul>
<pre><code class="language-js">var Person = function() {};

Person.prototype.n = 1;
var p1 = new Person();

Person.prototype = {
    n: 2,
    m: 3
}
var p2 = new Person();

console.log(p1.n);
console.log(p1.m);

console.log(p2.n);
console.log(p2.m);
</code></pre>
<h2 id="借用构造函数继承">借用构造函数继承</h2>
<blockquote>
<p>从构造函数中继承到构造函数中的成员</p>
</blockquote>
<pre><code class="language-js">function Person(name, age, gender){
    this.name = name;
    this.age = age;
    this.gender = gender;
}

function Chinese(name, age, gender, skin){
    this.name = name;
    this.age = age;
    this.gender = gender;
    // 以上代码重复，在构造函数Person中已经给this添加
    this.skin = skin;
}

// 重写构造函数Chinese
function Chinese(name, age, gender, skin){
    // 借用Person构造函数，继承到name、age、gender属性
    Person.call(this, name, age, gender);
    this.skin = skin;
}
</code></pre>
<h2 id="组合继承">组合继承</h2>
<blockquote>
<p>借用构造函数 + 原型链继承组合在一起使用</p>
</blockquote>
<pre><code class="language-js">function Person(name, age, gender){
    this.name = name;
    this.age = age;
    this.gender = gender;
}

// Person原型上的sayHi方法
Person.prototype.sayHi = function(){
    console.log(&quot;hello, 我是&quot; + this.name);
}

function Chinese(name, age, gender, skin){
    // 借用Person构造函数，继承到name、age、gender属性
    Person.call(this, name, age, gender);
    this.skin = skin;
}

var xm = new Chinese(&quot;xm&quot;, 20, &quot;male&quot;, &quot;黄色&quot;);
// xm有name/age/gender属性从Person构造函数中继承到的

// 那么如何让Chinese的实例对象xm去继承到Person原型上的sayHi方法???
xm.sayHi();
</code></pre>
<pre><code class="language-js">function Person() {
    this.name = &quot;is me&quot;;
    this.color = [&quot;lime&quot;, &quot;red&quot;];
}

function Chinese() {

}
Chinese.prototype = new Person();

var c1 = new Chinese();
var c2 = new Chinese();

c1.name = &quot;change&quot;;
c1.color.push(&quot;black&quot;);

console.log(c2.name);
console.log(c2.color);
</code></pre>
<h1 id="正则表达式">正则表达式</h1>
<blockquote>
<p>正则表达式：用于匹配规律规则的表达式，正则表达式最初是科学家对人类神经系统的工作原理的早期研究，现在在编程语言中有广泛的应用，经常用于表单校验，高级搜索等。</p>
</blockquote>
<h2 id="创建正则表达式">创建正则表达式</h2>
<p>【07-正则表达式的创建.html】</p>
<p>构造函数的方式</p>
<pre><code class="language-javascript">var regExp = new RegExp(/\d/);
</code></pre>
<p>正则字面量</p>
<pre><code class="language-javascript">var regExp = /\d/;
</code></pre>
<p>正则的使用</p>
<pre><code class="language-javascript">/\d/.test(&quot;aaa1&quot;);
</code></pre>
<h2 id="元字符">元字符</h2>
<blockquote>
<p>正则表达式由一些普通字符和元字符组成，普通字符包括大小写字母、数字等，而元字符则具有特殊的含义。</p>
</blockquote>
<h3 id="常见元字符">常见元字符</h3>
<p><code>|</code>表示或，优先级最低</p>
<p><code>()</code>优先级最高，表示分组</p>
<h3 id="字符类的元字符">字符类的元字符</h3>
<p><code>[]</code>在正则表达式中表示一个字符的位置，[]里面写这个位置可以出现的字符。</p>
<pre><code class="language-javascript">console.log(/[abc]/);//匹配a,b,c
</code></pre>
<p><code>[^]</code>在中扩号中的^表示非的意思。</p>
<pre><code class="language-javascript">//^表示该位置不可以出现的字符
console.log(/[^abc]/);//匹配除了a，b，c以外的其他字符
</code></pre>
<p><code>[a-z]</code> <code>[1-9]</code>表示范围</p>
<pre><code class="language-javascript">console.log(/[a-z]/.test(&quot;d&quot;));//小写字母
console.log(/[A-Z]/.test(&quot;d&quot;));//大写字母
console.log(/[0-9]/.test(&quot;8&quot;));//数字
console.log(/[a-zA-Z0-9]/);//所有的小写字母和大写字母以及数字
</code></pre>
<h3 id="边界类元字符">边界类元字符</h3>
<blockquote>
<p>我们前面学习的正则只要有满足的条件的就会返回true，并不能做到精确的匹配。</p>
</blockquote>
<p>【12-正则边界.html】</p>
<p>^表示开头   <em><strong>[]里面的^表示取反</strong></em></p>
<p>$表示结尾</p>
<pre><code class="language-javascript">console.log(/^chuan/.test(&quot;dachuan&quot;));//必须以chuan开头
console.log(/chuan$/.test(&quot;chuang&quot;));//必须以chuan结尾
console.log(/^chuan$/.test(&quot;chuan&quot;));//精确匹配chuan

//精确匹配chuan,表示必须是这个
console.log(/^chuan$/.test(&quot;chuanchuan&quot;));//fasle
</code></pre>
<h3 id="量词类元字符">量词类元字符</h3>
<blockquote>
<p>量词用来控制出现的次数，一般来说量词和边界会一起使用</p>
</blockquote>
<p>【13-正则量词.html】</p>
<ol>
<li><code>*</code>表示能够出现0次或者更多次，x&gt;=0;</li>
<li><code>+</code>表示能够出现1次或者多次，x&gt;=1</li>
<li><code>?</code>表示能够出现0次或者1次，x=0或者x=1</li>
<li><code>{n}</code>表示能够出现n次</li>
<li><code>{n,}</code>表示能够出现n次或者n次以上</li>
<li><code>{n,m}</code>表示能够出现n-m次</li>
</ol>
<p>思考：如何使用{}来表示*+?</p>
<h2 id="正则的使用">正则的使用</h2>
<h3 id="正则测试">正则测试</h3>
<ol start="2">
<li>
<p>验证QQ</p>
<ul>
<li>只能是数字</li>
<li>开头不能是0</li>
<li>长度为5-11位</li>
</ul>
<pre><code class="language-javascript">var qqReg = /^[1-9]\d{4,10}$/;
</code></pre>
</li>
<li>
<p>验证手机</p>
<ul>
<li>11位数字组成</li>
<li>号段13[0-9] 147 15[0-9] 17[0178] 18[0-9]</li>
</ul>
<pre><code class="language-javascript">var mobileReg = /^(13[0-9]|147|15[0-9]|17[0178]|18[0-9])\d{8}$/;
</code></pre>
</li>
<li>
<p>验证邮箱</p>
<ul>
<li>前面是字母或者数字</li>
<li>必须有@</li>
<li>@后面是字母或者数字</li>
<li>必须有.</li>
<li>.后面是字母或者数字</li>
</ul>
<pre><code class="language-javascript">var emailReg = /^\w+@\w+(\.\w+)+$/;
</code></pre>
</li>
<li>
<p>验证姓名</p>
<ul>
<li>只能是汉字</li>
<li>长度2-6位之间</li>
<li>汉字范围[\u4e00-\u9fa5]</li>
</ul>
<pre><code class="language-javascript">var nameReg = /^[\u4e00-\u9fa5]{2,6}$/;
</code></pre>
</li>
</ol>
<h3 id="正则替换">正则替换</h3>
<pre><code class="language-javascript">var str = &quot;   123AD  asadf   asadfasf  adf  &quot;;
1  替换掉字符串中的所有空白
2. 将所有的ad/AD替换成xx
</code></pre>
]]></content>
    </entry>
</feed>